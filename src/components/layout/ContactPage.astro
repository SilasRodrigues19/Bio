---
import Layout from "@/layouts/Layout.astro";

import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import sgMail from "@sendgrid/mail";
sgMail.setApiKey(import.meta.env.SG_API);

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const errors = { name: "", email: "", message: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");
    const message = data.get("message").toString();

    if (typeof name !== "string" || name.trim().length < 2)
      errors.name += t("contact.form.name.error");

    if (typeof email !== "string" || !email.includes("@"))
      errors.email += t("contact.form.email.error");

    if (typeof message !== "string" || message.trim().length < 10)
      errors.message += t("contact.form.message.error");

    const hasErrors = Object.values(errors).some((error) => error);

    if (!hasErrors) {
      const msg = {
        to: "silasrodrigues.fatec@gmail.com",
        from: "silasrodrigues.fatec@gmail.com",
        replyTo: { email: email.toString(), name: name.toString() },
        subject: `New message from ${name}`,
        text: message,
      };

      await sgMail
        .send(msg)
        .then(() => {
          Astro.response.status = 200;
          console.log("Email sent");
        })
        .catch((error) => {
          throw new Error(`Error sending email: ${error.message}`);
        });
    }
  } catch (error) {
    if (error instanceof Error) throw new Error(error.message);
  }
}
---

<Layout
  title={t("contact.layout.title")}
  description={t("contact.layout.description")}
>
  <section class="min-h-screen pb-16 sm:pb-20">
    <div
      class="mx-auto mt-12 max-w-2xl px-4 text-left sm:px-6 lg:max-w-7xl lg:px-8"
    >
      <div class="my-4 flex flex-col gap-4 sm:gap-6">
        <h1
          class="text-4xl font-medium tracking-tight text-primary-950/70 dark:text-primary-200/70 sm:text-3xl lg:text-5xl"
        >
          {t("contact.title")}
        </h1>
        <p
          class="max-w-xl text-lg text-primary-950/70 dark:text-primary-200/70 sm:text-xl"
        >
          {t("contact.paragraph-before")}
          <a
            href="mailto:silasrodrigues.fatec@gmail.com"
            class="underline underline-offset-4">email</a
          >
          {t("contact.paragraph-after")}
        </p>
        <div
          class="grid max-w-screen-xl grid-cols-1 gap-8 rounded-lg border-2 px-8 py-16 dark:border-gray-800 dark:text-gray-100 md:grid-cols-2 md:px-12 lg:px-16 xl:px-32"
        >
          <div class="flex flex-col justify-center gap-2">
            <div class="space-y-2">
              <h2
                class="text-4xl font-bold text-primary-950/70 dark:text-primary-200/70 lg:text-5xl"
              >
                {t("contact.form.title")}
              </h2>
              <div class="text-primary-950/70 dark:text-primary-200/70">
                {t("contact.form.paragraph")}
              </div>
            </div>
            <img
              src="/assets/contact.svg"
              class="h-52 p-6 md:h-64"
              alt="Contact form illustration"
              loading="lazy"
              decoding="async"
            />
          </div>
          <form
            x-data="{ isSubmitting: false }"
            @submit.prevent="if (!isSubmitting) {isSubmitting = true; $el.submit()}"
            class="space-y-6 text-primary-950/70 dark:text-primary-200/70"
            method="POST"
          >
            <div>
              <label for="name" class="text-sm">{t("contact.form.name")}</label>
              {
                errors.name && (
                  <p class="my-2 text-sm text-red-500">{errors.name}</p>
                )
              }
              <input
                id="name"
                name="name"
                type="text"
                class="w-full rounded bg-primary-200 p-3 outline-none focus:ring-2 focus:ring-primary-400 dark:bg-primary-800"
              />
            </div>
            <div>
              <label for="email" class="text-sm"
                >{t("contact.form.email")}</label
              >
              {
                errors.email && (
                  <p class="my-2 text-sm text-red-500">{errors.email}</p>
                )
              }
              <input
                id="email"
                name="email"
                type="email"
                class="w-full rounded bg-primary-200 p-3 outline-none focus:ring-2 focus:ring-primary-400 dark:bg-primary-800"
              />
            </div>
            <div>
              <label for="message" class="text-sm"
                >{t("contact.form.message")}</label
              >
              <div x-data="{ textareaHeight: '12rem' }">
                {
                  errors.message && (
                    <p class="my-2 text-sm text-red-500">{errors.message}</p>
                  )
                }
                <textarea
                  x-on:input="textareaHeight = $event.target.scrollHeight + 'px'"
                  x-on:blur="textareaHeight = '12rem'"
                  x-bind:style="'height: ' + textareaHeight"
                  x-on:focus="textareaHeight = $event.target.scrollHeight + 'px'"
                  id="message"
                  name="message"
                  rows="3"
                  class="w-full resize-none rounded bg-primary-200 p-3 outline-none focus:ring-2 focus:ring-primary-400 dark:bg-primary-800"
                ></textarea>
              </div>
            </div>
            <button
              x-bind:disabled="isSubmitting"
              class="flex w-full items-center justify-center gap-4 rounded bg-gradient-to-l from-violet-500/25 to-cyan-300/25 bg-size-200 bg-pos-0 p-3 text-sm font-bold uppercase tracking-wide text-primary-500 transition-all duration-500 hover:bg-gradient-to-r hover:bg-pos-100 dark:text-primary-400"
            >
              <span x-show="!isSubmitting" class="flex items-center gap-2">
                {t("contact.form.button-default")}
                <span class="iconify" data-icon="ph:paper-plane-tilt-fill"
                ></span>
              </span>

              <span x-show="isSubmitting" class="flex items-center gap-2">
                {t("contact.form.button-sending")}
                <span class="iconify" data-icon="eos-icons:bubble-loading"
                ></span>
              </span>
            </button>
          </form>
        </div>
      </div>
    </div>
  </section>
</Layout>
